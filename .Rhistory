library(readxl)
predictedVsActual <- function (expected, mlp_test) {
expectedTest <- cbind(expected, as.data.frame(mlp_test$net.result))
colnames(expectedTest) <- c("Expected Output", "NeuralNetwork Output")
return(expectedTest)
}
rmse <- function (actual, predicted)
{
RMSE <- sqrt(mean((actual - predicted)^2))
return(RMSE)
}
evaluationFunction <- function(actual,predict) {
rmse_mlp <- rmse(actual = actual, predicted = predict)
mae_mlp <- Metrics::mae(actual = actual, predicted = predict)
mape_mlp <- MAPE(y_pred = predict, y_true = actual)
return(c(rmse_mlp, mae_mlp, mape_mlp))
}
powerOutage <- read_xlsx("./powerUsage-scaled.xlsx")
powerOutage <- read_xl("./powerUsage-scaled.xlsx")
library(readxl)
powerOutage <- read_xlsx("./powerUsage-scaled.xlsx")
set.seed(123)
splitRule <- sample(seq_len(nrow(powerOutage)), size = 430)
train <- powerOutage[splitRule, ]
test <- powerOutage[-splitRule, ]
x_test <- test[-1]
y_test <- test[1]
relation1 <- as.formula("original~v2+v3+v4+v5+v6")
mlp1 <- neuralnet(formula = relation1, data = train,hidden = c(4,3), stepmax = 1e+10)
plot(mlp1)
library(neuralnet)
# MLP Neural Networks - Configuration 1
relation1 <- as.formula("original~v2+v3+v4+v5+v6")
mlp1 <- neuralnet(formula = relation1, data = train,hidden = c(4,3), stepmax = 1e+10)
plot(mlp1)
y_pred1 <- neuralnet::compute(mlp1, x_test)
evaluationData1 <- predictedVsActual(y_test, y_pred1)
mlpTestResult1 <- evaluationFunction(actual = evaluationData1$`Expected Output`, predict = evaluationData1$`NeuralNetwork Output`)
relation2 <- as.formula("original~v2+v3+v4+v5+v6")
mlp2 <- neuralnet(formula = relation2, data = train,hidden = c(4,3), stepmax = 1e+10, learningrate = 0.001)
plot(mlp2)
y_pred2 <- neuralnet::compute(mlp2, x_test)
evaluationData2 <- predictedVsActual(y_test, y_pred2)
mlpTestResult2 <- evaluationFunction(actual = evaluationData2$`Expected Output`, predict = evaluationData2$`NeuralNetwork Output`)
relation3 <- as.formula("original~v2+v3+v4+v5+v6")
mlp3 <- neuralnet(formula = relation3, data = train,hidden = c(3,2), stepmax = 1e+10)
plot(mlp3)
y_pred3 <- neuralnet::compute(mlp3, x_test)
evaluationData3 <- predictedVsActual(y_test, y_pred3)
mlpTestResult3 <- evaluationFunction(actual = evaluationData3$`Expected Output`, predict = evaluationData3$`NeuralNetwork Output`)
# Make prediction on X test data
y_pred4 <- neuralnet::compute(mlp4, x_test)
evaluationData4 <- predictedVsActual(y_test, y_pred4)
mlpTestResult4 <- evaluationFunction(actual = evaluationData4$`Expected Output`, predict = evaluationData4$`NeuralNetwork Output`)
train0 <- train[1:4]
relation5 <- as.formula("original~v2+v3+v4")
mlp5 <- neuralnet(formula = relation5, data = train0,hidden = c(4,3), stepmax = 1e+10, learningrate = 0.001)
plot(mlp5)
library(MLmetrics)
library(Metrics)
train0 <- train[1:4]
relation5 <- as.formula("original~v2+v3+v4")
mlp5 <- neuralnet(formula = relation5, data = train0,hidden = c(4,3), stepmax = 1e+10, learningrate = 0.001)
plot(mlp5)
x_test0 <- test[2:4]
y_pred5 <- neuralnet::compute(mlp5, x_test0)
evaluationData5 <- predictedVsActual(y_test, y_pred5)
mlpTestResult5 <- evaluationFunction(actual = evaluationData5$`Expected Output`, predict = evaluationData5$`NeuralNetwork Output`)
comp <- rbind(mlpTestResult1, mlpTestResult2, mlpTestResult3, mlpTestResult4, mlpTestResult5)
colnames(comp) <- c("RMSE","MAE","MAPE")
rownames(comp) <- c("config-1","config-2","config-3","config-4","config-5")
comp
library(readxl)
library(neuralnet)
library(caTools)
library(MLmetrics)
library(Metrics)
predictedVsActual <- function (expected, mlp_test) {
expectedTest <- cbind(expected, as.data.frame(mlp_test$net.result))
colnames(expectedTest) <- c("Expected Output", "NeuralNetwork Output")
return(expectedTest)
}
rmse <- function (actual, predicted)
{
RMSE <- sqrt(mean((actual - predicted)^2))
return(RMSE)
}
evaluationFunction <- function(actual,predict) {
rmse_mlp <- rmse(actual = actual, predicted = predict)
mae_mlp <- Metrics::mae(actual = actual, predicted = predict)
mape_mlp <- MAPE(y_pred = predict, y_true = actual)
return(c(rmse_mlp, mae_mlp, mape_mlp))
}
# Import Processed Dataset
powerOutage <- read_xlsx("./powerUsage-scaled.xlsx")
set.seed(123)
splitRule <- sample(seq_len(nrow(powerOutage)), size = 430)
train <- powerOutage[splitRule, ]
test <- powerOutage[-splitRule, ]
# Define X values of test data
x_test <- test[-1]
# Define Y values of test data
y_test <- test[1]
relation1 <- as.formula("original~v2+v3+v4+v5+v6")
mlp1 <- neuralnet(formula = relation1, data = train,hidden = c(4,3), stepmax = 1e+10)
plot(mlp1)
y_pred1 <- neuralnet::compute(mlp1, x_test)
evaluationData1 <- predictedVsActual(y_test, y_pred1)
mlpTestResult1 <- evaluationFunction(actual = evaluationData1$`Expected Output`, predict = evaluationData1$`NeuralNetwork Output`)
relation2 <- as.formula("original~v2+v3+v4+v5+v6")
mlp2 <- neuralnet(formula = relation2, data = train,hidden = c(4,3), stepmax = 1e+10, learningrate = 0.001)
plot(mlp2)
y_pred2 <- neuralnet::compute(mlp2, x_test)
evaluationData2 <- predictedVsActual(y_test, y_pred2)
mlpTestResult2 <- evaluationFunction(actual = evaluationData2$`Expected Output`, predict = evaluationData2$`NeuralNetwork Output`)
relation3 <- as.formula("original~v2+v3+v4+v5+v6")
mlp3 <- neuralnet(formula = relation3, data = train,hidden = c(3,2), stepmax = 1e+10)
plot(mlp3)
relation4 <- as.formula("original~v2+v3+v4+v5+v6")
mlp4 <- neuralnet(formula = relation4, data = train,hidden = c(5,2), stepmax = 1e+10, learningrate = 0.001)
plot(mlp4)
train0 <- train[1:4]
relation5 <- as.formula("original~v2+v3+v4")
mlp5 <- neuralnet(formula = relation5, data = train0,hidden = c(4,3), stepmax = 1e+10, learningrate = 0.001)
plot(mlp5)
x_test0 <- test[2:4]
y_pred5 <- neuralnet::compute(mlp5, x_test0)
evaluationData5 <- predictedVsActual(y_test, y_pred5)
mlpTestResult5 <- evaluationFunction(actual = evaluationData5$`Expected Output`, predict = evaluationData5$`NeuralNetwork Output`)
comp <- rbind(mlpTestResult1, mlpTestResult2, mlpTestResult3, mlpTestResult4, mlpTestResult5)
colnames(comp) <- c("RMSE","MAE","MAPE")
rownames(comp) <- c("config-1","config-2","config-3","config-4","config-5")
comp
predicted_actual <- function (expected, mlp_test) {
expectedTest <- cbind(expected, as.data.frame(mlp_test$net.result))
colnames(expectedTest) <- c("Expected Output", "NeuralNetwork Output")
return(expectedTest)
}
rmse <- function (actual, predicted)
{
RMSE <- sqrt(mean((actual - predicted)^2))
return(RMSE)
}
evaluation_function <- function(actual,predict) {
rmse_mlp <- rmse(actual = actual, predicted = predict)
mae_mlp <- Metrics::mae(actual = actual, predicted = predict)
mape_mlp <- MAPE(y_pred = predict, y_true = actual)
return(c(rmse_mlp, mae_mlp, mape_mlp))
}
power_usage <- read_xlsx("./powerUsage-scaled.xlsx")
library(readxl)
power_usage <- read_xlsx("./powerUsage-scaled.xlsx")
set.seed(123)
splitRule <- sample(seq_len(nrow(powerOutage)), size = 430)
train_set <- power_usage[splitRule, ]
test_set <- power_usage[-splitRule, ]
x_test_set <- test_set[-1]
# Define Y values of test data
y_test_set <- test_set[1]
relation_1 <- as.formula("original~v2+v3+v4+v5+v6")
mlp_1 <- neuralnet(formula = relation_1, data = train,hidden = c(4,3), stepmax = 1e+10)
plot(mlp_1)
# Make prediction on X test data
y_pred_1 <- neuralnet::compute(mlp_1, x_test_set)
evaluationData_1 <- predicted_actual(y_test_set, y_pred_1)
mlpTestResult_1 <- evaluation_function(actual = evaluationData_1$`Expected Output`, predict = evaluationData_1$`NeuralNetwork Output`)
# Neural Networks - Configuration 1
relation_1 <- as.formula("original~v2+v3+v4+v5+v6")
library(neuralnet)
mlp_1 <- neuralnet(formula = relation_1, data = train,hidden = c(4,3), stepmax = 1e+10)
plot(mlp_1)
y_pred_1 <- neuralnet::compute(mlp_1, x_test_set)
evaluationData_1 <- predicted_actual(y_test_set, y_pred_1)
mlpTestResult_1 <- evaluation_function(actual = evaluationData_1$`Expected Output`, predict = evaluationData_1$`NeuralNetwork Output`)
y_pred_1 <- neuralnet::compute(mlp_1, x_test_set)
evaluationData_1 <- predicted_actual(y_test_set, y_pred_1)
mlpTestResult_1 <- evaluation_function(actual = evaluationData_1$`Expected Output`, predict = evaluationData_1$`NeuralNetwork Output`)
library(MLmetrics)
library(Metrics)
mlpTestResult_1 <- evaluation_function(actual = evaluationData_1$`Expected Output`, predict = evaluationData_1$`NeuralNetwork Output`)
relation_2 <- as.formula("original~v2+v3+v4+v5+v6")
mlp_2 <- neuralnet(formula = relation_2, data = train,hidden = c(4,3), stepmax = 1e+10, learningrate = 0.001)
plot(mlp_2)
y_pred_2 <- neuralnet::compute(mlp_2, x_test_set)
evaluationData_2 <- predicted_actual(y_test_set, y_pred_2)
mlpTestResult_2 <- evaluation_function(actual = evaluationData_2$`Expected Output`, predict = evaluationData_2$`NeuralNetwork Output`)
relation_3 <- as.formula("original~v2+v3+v4+v5+v6")
mlp_3 <- neuralnet(formula = relation_3, data = train,hidden = c(3,2), stepmax = 1e+10)
plot(mlp_3)
# Make prediction on X test data
y_pred_3 <- neuralnet::compute(mlp_3, x_test_set)
evaluationData_3 <- predicted_actual(y_test_set, y_pred_3)
mlpTestResult_3 <- evaluation_function(actual = evaluationData_3$`Expected Output`, predict = evaluationData_3$`NeuralNetwork Output`)
relation_4 <- as.formula("original~v2+v3+v4+v5+v6")
mlp_4 <- neuralnet(formula = relation_4, data = train,hidden = c(5,2), stepmax = 1e+10, learningrate = 0.001)
library(readxl)
# Get DataFrame
df <- read_excel("./energy_data.xlsx")
View(df)
df <- df$`11:00`
View(df)
str(df)
plot(df)
# Partial Autocorelation plot
pacf(x = df, plot = TRUE)
# Create Lags for Time Series
lag_1 = lag(df,1)
lag_2 = lag(df,2)
lag_3 = lag(df,3)
lag_4 = lag(df,4)
lag_5 = lag(df,5)
df <- cbind(df,lag1,lag2,lag3,lag4,lag5)
# Formatting df
df <- na.omit(df)
sum(is.na(df))
colnames(df) <- c("original","v2","v3","v4","v5","v6")
# Scale Data
df_scaled <- scale(df)
str(df_scaled)
library(caTools)
df <- df$`11:00`
View(df)
str(df)
plot(df)
# Partial Autocorelation plot
pacf(x = df, plot = TRUE)
# Create Lags for Time Series
lag_1 = lag(df,1)
lag_2 = lag(df,2)
lag_3 = lag(df,3)
lag_4 = lag(df,4)
lag_5 = lag(df,5)
df <- cbind(df,lag1,lag2,lag3,lag4,lag5)
# Formatting df
df <- na.omit(df)
sum(is.na(df))
colnames(df) <- c("original","v2","v3","v4","v5","v6")
# Scale Data
df_scaled <- scale(df)
str(df_scaled)
df <- df$`11:00`
View(df)
str(df)
plot(df)
# Partial Autocorelation plot
pacf(x = df, plot = TRUE)
# Create Lags for Time Series
lag_1 = lag(df,1)
lag_2 = lag(df,2)
lag_3 = lag(df,3)
lag_4 = lag(df,4)
lag_5 = lag(df,5)
df <- cbind(df,lag_1,lag_2,lag_3,lag_4,lag_5)
# Formatting df
df <- na.omit(df)
sum(is.na(df))
colnames(df) <- c("original","v2","v3","v4","v5","v6")
# Scale Data
df_scaled <- scale(df)
str(df_scaled)
df <- df$`11:00`
View(df)
str(df)
plot(df)
# Partial Autocorelation plot
pacf(x = df, plot = TRUE)
# Create Lags for Time Series
lag_1 = lag(df,1)
lag_2 = lag(df,2)
lag_3 = lag(df,3)
lag_4 = lag(df,4)
lag_5 = lag(df,5)
df <- cbind(df,lag_1,lag_2,lag_3,lag_4,lag_5)
# Formatting df
df <- na.omit(df)
sum(is.na(df))
colnames(df) <- c("original","v2","v3","v4","v5","v6")
# Scale Data
df_scaled <- scale(df)
str(df_scaled)
# Get DataFrame
df <- read_excel("./energy_data.xlsx")
View(df)
df <- df$`11:00`
View(df)
str(df)
plot(df)
# Partial Autocorelation plot
pacf(x = df, plot = TRUE)
# Create Lags for Time Series
lag_1 = lag(df,1)
lag_2 = lag(df,2)
lag_3 = lag(df,3)
lag_4 = lag(df,4)
lag_5 = lag(df,5)
df <- cbind(df,lag_1,lag_2,lag_3,lag_4,lag_5)
# Formatting df
df <- na.omit(df)
sum(is.na(df))
colnames(df) <- c("original","v2","v3","v4","v5","v6")
# Scale Data
df_scaled <- scale(df)
str(df_scaled)
# Save processed data to excel file
write.xlsx(df_scaled,
file = "./powerUsage-scaled.xlsx",
col.names = TRUE, append = TRUE, row.names = FALSE)
set.seed(123)
splitRule <- sample(seq_len(nrow(powerOutage)), size = 430)
train_set <- power_usage[splitRule, ]
test_set <- power_usage[-splitRule, ]
dim(train_set)
set.seed(123)
splitRule <- sample(seq_len(nrow(powerOutage)), size = 430)
train_set <- power_usage[splitRule, ]
test_set <- power_usage[-splitRule, ]
dim(train_set)
dim(test_set)
# Neural Networks - Configuration 1
relation_1 <- as.formula("original~v2+v3+v4+v5+v6")
mlp_1 <- neuralnet(formula = relation_1, data = train,hidden = c(4,3), stepmax = 1e+10)
plot(mlp_1)
